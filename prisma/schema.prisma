generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Building {
  id          String   @id @default(cuid())
  name        String
  floors      Floor[]
}

model Floor {
  id          String   @id @default(cuid())
  number      Int
  buildingId  String
  building    Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  rooms       Room[] 
}

model Room {
  id          String        @id @default(cuid())
  name        String
  floorId     String
  floor       Floor         @relation(fields: [floorId], references: [id], onDelete: Cascade)
  devices     DeviceRoom[]
}

// Device model represents devices that can be controlled in the system
model Device {
  id          String        @id @default(cuid())
  name        String
  status      String
  type        DEVICETYPE    @default(OTHER)
  rooms       DeviceRoom[]
  deviceTriggers TriggerDevice[]
  deviceActions ActionDevice[]
}

enum DEVICETYPE {
  LIGHT
  THERMOSTAT
  SENSOR
  SWITCH
  CAMERA
  PLUG
  PRINTER
  FAN
  OUTLET
  PROJECTOR
  SPEAKER
  ROUTER
  WORKSTATION
  COMPUTER
  AIR
  OTHER
}

// DeviceRoom is a join table to associate devices with rooms
model DeviceRoom {
  deviceId    String
  device      Device        @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  roomId      String
  room        Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@id([deviceId, roomId])
}

// Automation model represents automations that can be triggered by various events
model Automation {
  id          String        @id @default(cuid())
  name        String
  enabled     Boolean       @default(true)
  trigger     Trigger?      @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  triggerId   String?       @unique
  actions     Action[]
  schedule    Schedule?     @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId  String?       @unique
}

// Trigger model represents the conditions that can trigger an automation
model Trigger {
  id          String        @id @default(cuid())
  type        String        // "time", "device", or "scene"
  automation  Automation?
  timeTrigger TriggerTime?
  deviceTrigger TriggerDevice?
  sceneTrigger TriggerScene?
}

// TriggerTime represents a time-based trigger for an automation
model TriggerTime {
  id          String        @id @default(cuid())
  time        String        // HH:mm format
  trigger     Trigger       @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  triggerId   String        @unique
}

// TriggerDevice represents a device-based trigger for an automation
model TriggerDevice {
  id          String        @id @default(cuid())
  deviceId    String
  device      Device        @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  deviceState Boolean
  trigger     Trigger       @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  triggerId   String        @unique
}

// TriggerScene represents a scene-based trigger for an automation
model TriggerScene {
  id          String        @id @default(cuid())
  sceneId     String
  trigger     Trigger       @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  triggerId   String        @unique
  // Note: Scene model would need to be added if it doesn't exist
}

// Action model represents actions that can be performed as part of an automation
model Action {
  id          String        @id @default(cuid())
  type        String        // "device" or "scene"
  automationId String
  automation  Automation    @relation(fields: [automationId], references: [id], onDelete: Cascade)
  deviceAction ActionDevice?
  sceneAction ActionScene?
}

// ActionDevice represents actions that control devices
model ActionDevice {
  id          String        @id @default(cuid())
  targetId    String        // The ID of the device to control
  device      Device        @relation(fields: [targetId], references: [id], onDelete: Cascade)
  state       Boolean?
  brightness  Int?
  temperature Int?
  level       Int?
  action      Action        @relation(fields: [actionId], references: [id], onDelete: Cascade)
  actionId    String        @unique
}

// ActionScene represents actions that control scenes
model ActionScene {
  id          String        @id @default(cuid())
  targetId    String    
  action      Action        @relation(fields: [actionId], references: [id], onDelete: Cascade)
  actionId    String        @unique
  // Note: Scene model would need to be added if it doesn't exist
}

// Schedule model represents scheduled automations
model Schedule {
  id          String        @id @default(cuid())
  repeat      String        // "daily", "weekly", or "once"
  time        String        // HH:mm format
  automation  Automation?
  scheduleDays ScheduleDay[]
}

// ScheduleDay represents the days of the week for a scheduled automation, deu pra entender j√°
model ScheduleDay {
  id          String        @id @default(cuid())
  day         Int           // 0-6 (0 = Sunday)
  scheduleId  String
  schedule    Schedule      @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@unique([scheduleId, day])
}